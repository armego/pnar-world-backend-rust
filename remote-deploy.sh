#!/usr/bin/env bash
# remote-deploy.sh <systemd-service> <run-migrations:true|false> <database-url> <db-user> <db-pass> <jwt-secret> <enable-firewall:true|false>
set -euo pipefail

echo "=============================================="
echo "RUNNING CI-FRIENDLY DEPLOY SCRIPT (v5)"
echo "=============================================="
echo "Script: $0"
echo "PWD: $(pwd)"
echo "User: $(whoami) (UID: $(id -u))"
echo "Arguments: $*"
echo "CI env var: ${CI:-not set}"
echo "GITHUB_ACTIONS env var: ${GITHUB_ACTIONS:-not set}"
echo "=============================================="

# Enable tracing to see exactly what's being executed
set -x

SERVICE="${1:-pnar.service}"
RUN_MIGRATIONS="${2:-false}"
DATABASE_URL="${3:-}"
DATABASE_USER="${4:-}"
DATABASE_PASSWORD="${5:-}"
JWT_SECRET="${6:-}"
# Optional seventh argument enables basic firewall hardening (true/false)
ENABLE_FIREWALL="${7:-false}"

# Validate that secrets have been passed
if [ -z "$DATABASE_USER" ] || [ -z "$DATABASE_PASSWORD" ] || [ -z "$JWT_SECRET" ]; then
  echo "ERROR: DATABASE_USER (arg 4), DATABASE_PASSWORD (arg 5), and JWT_SECRET (arg 6) must be provided."
  exit 1
fi

APP_DIR="$(cd "$(dirname "$0")" && pwd)"
ARCHIVE="$APP_DIR/pnar-release.tar.gz"
BIN_NAME="pnar-world-api"
BIN_PATH="$APP_DIR/${BIN_NAME}"
BACKUP_DIR="$APP_DIR/backups"
TIMESTAMP="$(date -u +%Y%m%dT%H%M%SZ)"

echo "Deploying service: $SERVICE"
echo "Run migrations: $RUN_MIGRATIONS"
echo "App directory: $APP_DIR"

if [ ! -f "$ARCHIVE" ]; then
  echo "ERROR: archive not found: $ARCHIVE"
  exit 2
fi

# Stop the service if not in CI
if [ -z "${CI:-}" ] && [ -z "${GITHUB_ACTIONS:-}" ]; then
    echo "Attempting to stop service with systemctl --user..."
    systemctl --user stop "$SERVICE" || echo "Service stop failed or not running. Continuing..."
else
    echo "Skipping systemctl stop (CI compatibility mode)"
fi

# Backup existing binary
if [ -f "$BIN_PATH" ]; then
  echo "Backing up existing binary from $BIN_PATH"
  mkdir -p "$BACKUP_DIR/$TIMESTAMP"
  cp -a "$BIN_PATH" "$BACKUP_DIR/$TIMESTAMP/"
fi

# Extract the new release
echo "Extracting archive $ARCHIVE into $APP_DIR"
# The archive is created with the correct directory structure, so we don't strip components.
tar -xzf "$ARCHIVE" -C "$APP_DIR"

# Debug: List what was extracted
echo "=== DEBUG: Files extracted to $APP_DIR ==="
ls -la "$APP_DIR"
echo "=== END DEBUG ==="

# Ensure binaries are executable
chmod +x "$BIN_PATH"
if [ -f "$APP_DIR/sqlx" ]; then
  chmod +x "$APP_DIR/sqlx"
fi

# Create .env file for the application from arguments
echo "Creating pnar.env file with secrets..."
# Ensure the file is only readable by the user
umask 077
cat << EOF > "$APP_DIR/pnar.env"
# This file is auto-generated by the deploy script. DO NOT EDIT MANUALLY.
DATABASE_USER=${DATABASE_USER}
DATABASE_PASSWORD=${DATABASE_PASSWORD}
JWT_SECRET=${JWT_SECRET}
EOF
# Restore umask
umask 022
echo "pnar.env created successfully."

# Run migrations if requested
if [ "$RUN_MIGRATIONS" = "true" ]; then
  echo "Running database migrations..."
  if [ -z "$DATABASE_URL" ]; then
    echo "ERROR: DATABASE_URL (arg 3) is required when running migrations."
    exit 1
  fi
  # The sqlx-cli binary should be in the same directory
  if [ -x "$APP_DIR/sqlx" ]; then
    echo "Found sqlx-cli. Running migrations..."
    
    # Debug: Show current directory and available files
    echo "=== DEBUG: Migration environment ==="
    echo "Current directory: $(pwd)"
    # Redact password for security
    REDACTED_URL=$(echo "$DATABASE_URL" | sed -E 's/:[^@]+@/:<REDACTED>@/')
    echo "DATABASE_URL (redacted): $REDACTED_URL"
    echo "APP_DIR: $APP_DIR"
    echo "Contents of APP_DIR:"
    ls -la "$APP_DIR"
    echo "Looking for migrations directory:"
    ls -la "$APP_DIR/migrations" 2>/dev/null || echo "migrations directory not found in APP_DIR"
    echo "=== END DEBUG ==="
    
    # Change to APP_DIR for migrations
    cd "$APP_DIR"
    
    # Export DATABASE_URL for sqlx-cli to use
    export DATABASE_URL
    "$APP_DIR/sqlx" migrate run
    echo "Migrations complete."
  else
    echo "ERROR: sqlx-cli not found in $APP_DIR. Cannot run migrations."
    exit 1 # Fail the deployment if migrations are expected but can't run
  fi
else
  echo "Skipping database migrations."
fi

# Start the service if not in CI
if [ -z "${CI:-}" ] && [ -z "${GITHUB_ACTIONS:-}" ]; then
    echo "Attempting to start service with systemctl --user..."
    systemctl --user daemon-reload
    systemctl --user start "$SERVICE"
    echo "Service start command issued. To check status, run:"
    echo "systemctl --user status $SERVICE"
else
    echo "Skipping systemctl start (CI compatibility mode)"
fi

echo "Deployment script finished successfully at $(date -u)."
echo "=============================================="
