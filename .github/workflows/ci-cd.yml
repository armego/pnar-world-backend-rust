name: CI / CD

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.package.outputs.artifact }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --release --all --locked

      - name: Build release
        run: cargo build --release --locked

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --version=0.7.4 --locked --no-default-features --features rustls,postgres

      - name: Package binary
        id: package
        run: |
          mkdir -p out
          # Binary name comes from Cargo.toml ([[bin]] name = "pnar-world-api")
          BIN=target/release/pnar-world-api
          if [ ! -f "$BIN" ]; then
            echo "Binary not found at $BIN"
            exit 1
          fi
          # Debug: Check if sqlx-cli was installed
          echo "=== DEBUG: Checking for sqlx-cli ==="
          ls -la ~/.cargo/bin/ | grep sqlx || echo "sqlx not found in ~/.cargo/bin/"
          which sqlx || echo "sqlx not in PATH"
          echo "=== END DEBUG ==="

          # Preserve the real binary filename (pnar-world-api)
          cp "$BIN" out/pnar-world-api
          # Also copy the sqlx-cli binary
          if [ -f ~/.cargo/bin/sqlx ]; then
            cp ~/.cargo/bin/sqlx out/sqlx
            chmod +x out/sqlx
            echo "sqlx copied successfully"
          else
            echo "ERROR: sqlx binary not found at ~/.cargo/bin/sqlx"
            exit 1
          fi

          # Copy migrations directory
          if [ -d migrations ]; then
            cp -r migrations out/
            echo "migrations directory copied successfully"
          else
            echo "WARNING: migrations directory not found"
          fi

          # Debug: Check what's in the out directory
          echo "=== DEBUG: Contents of out directory ==="
          ls -la out/
          echo "=== END DEBUG ==="

          tar -C out -czf pnar-release.tar.gz pnar-world-api sqlx migrations          # Debug: Check what's in the tarball
          echo "=== DEBUG: Contents of tarball ==="
          tar -tzf pnar-release.tar.gz
          echo "=== END DEBUG ==="

          echo "artifact=pnar-release.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pnar-release
          path: pnar-release.tar.gz

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: pnar-release
          path: .

      - name: Prepare SSH key and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Copy release and deploy script to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'pnar-release.tar.gz,remote-deploy.sh,configuration.yaml'
          target: '/home/${{ secrets.SSH_USER }}/deploy'
          overwrite: true

      - name: Run deploy script on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USER }}/deploy
            echo "--- Listing files in deploy directory ---"
            ls -la
            echo "----------------------------------------"
            chmod +x ./remote-deploy.sh
            ./remote-deploy.sh pnar.service ${{ secrets.RUN_MIGRATIONS || 'false' }} "${{ secrets.DATABASE_URL }}" "${{ secrets.DATABASE_USER }}" "${{ secrets.DATABASE_PASSWORD }}" "${{ secrets.JWT_SECRET }}" false
