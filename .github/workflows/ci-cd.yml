name: CI / CD

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.package.outputs.artifact }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --release --all --locked

      - name: Build release
        run: cargo build --release --locked

      - name: Package binary
        id: package
        run: |
          mkdir -p out
          # Binary name comes from Cargo.toml ([[bin]] name = "pnar-world-api")
          BIN=target/release/pnar-world-api
          if [ ! -f "$BIN" ]; then
            echo "Binary not found at $BIN"
            exit 1
          fi
          # Preserve the real binary filename (pnar-world-api)
          cp "$BIN" out/pnar-world-api
          tar -C out -czf pnar-release.tar.gz pnar-world-api
          echo "artifact=pnar-release.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pnar-release
          path: pnar-release.tar.gz

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: pnar-release
          path: .

      - name: Prepare SSH key and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
            echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
            chmod 644 ~/.ssh/known_hosts
          else
            # fallback to ssh-keyscan (best-effort, may fail in restricted runners)
            if [ -n "${{ secrets.SSH_HOST }}" ]; then
              ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts || true
              chmod 644 ~/.ssh/known_hosts || true
            fi
          fi

      - name: Copy release and deploy script to server (pnar-owned dir)
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # upload both the release archive and the deploy helper; ensure REMOTE_APP_DIR is writable by the pnar user (e.g. /home/pnar/deploy)
          source: 'pnar-release.tar.gz,remote-deploy.sh'
          target: '${{ secrets.REMOTE_APP_DIR }}'

      - name: Run remote deploy script (as pnar user, non-privileged)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd "${{ secrets.REMOTE_APP_DIR }}"
            chmod +x ./remote-deploy.sh || true
            ./remote-deploy.sh "${{ secrets.REMOTE_SERVICE }}" "${{ secrets.RUN_MIGRATIONS }}" "${{ secrets.DATABASE_URL }}" "${{ secrets.ENABLE_FIREWALL || 'false' }}"
